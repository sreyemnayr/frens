//SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "OpenZeppelin/openzeppelin-contracts@4.8.0/contracts/utils/Base64.sol";
import "./Utilities.sol";
import "./FrensTraits.sol";
import "../interfaces/IFrens.sol";

/**

@title  FrensMetadata
@author VisualizeValue
@notice Renders ERC721 compatible metadata for Frens.
*/
library FrensMetadata {


    /// @dev Get the Fren information given randomness + tokenId
    /// @param tokenId The id of the token to render.
    /// @param randomness The randomness generated by the epoch commit/reveal.
    function tokenURI(
      uint256 tokenId, uint128 randomness, string calldata baseURI
    ) public pure returns (string memory) {
      IFrens.Fren memory fren;
      uint128 rando = 0;

      if (randomness > 0) {
        fren.isRevealed = true;
        rando = uint128(uint256(keccak256(
                abi.encodePacked(
                    randomness,
                    tokenId
                ))) % (2 ** 128 - 1)
        );

        fren.palette = FrensTraits.palette(rando);
        fren.colors = FrensTraits.colors(rando);
        fren.rotation = FrensTraits.rotation(rando);
        fren.direction = FrensTraits.direction(rando);
        fren.segment = FrensTraits.segment(rando);
        fren.inverted = rando % 1000 == 0;
        fren.attention = rando % 2000 == 0;
      }
      

      bytes memory metadata = abi.encodePacked(
            '{',
                '"name": "Frens #', Utilities.uint2str(tokenId), '",',
                '"description": "These frens may or may not be notable.",',
                '"image": "',
                    baseURI,
                    Utilities.uint2str(rando),
                    '.png',
                    '",',
                '"attributes": [', attributes(fren), ']',
            '}'
        );
      
      return string(
            abi.encodePacked(
                "data:application/json;base64,",
                Base64.encode(metadata)
            )
        );
      
    }



    /// @dev Render the JSON atributes for a given Frens token.
    /// @param fren The fren to render.
    function attributes(IFrens.Fren memory fren) public pure returns (bytes memory) {

        return abi.encodePacked(
            fren.isRevealed
                ? trait('Color Palette', string(abi.encodePacked('#',Utilities.uint2str(fren.palette))), ',')
                : trait('Revealed', 'No', ','),
            fren.isRevealed
                ? trait('# Colors', string(abi.encodePacked(Utilities.uint2str(fren.colors), ' COLORS')), ',')
                : '',
            fren.isRevealed
                ? trait('Palette Segment', fren.segment, ',')
                : '',
            fren.isRevealed
                ? trait('Palette Rotation', string(abi.encodePacked(Utilities.uint2str(fren.rotation), 'x')), ',')
                : '',
            fren.isRevealed
                ? trait('Palette Direction', fren.direction, ',')
                : '',
            fren.inverted
                ? trait('Inverted', 'Yes', ',')
                : '',
            fren.attention
                ? trait('Benefits', 'Yes', ',')
                : '',
            trait('Artist', 'Gabe Weis', '')
        );
    }

    

    /// @dev Generate the JSON for a single attribute.
    /// @param traitType The `trait_type` for this trait.
    /// @param traitValue The `value` for this trait.
    /// @param append Helper to append a comma.
    function trait(
        string memory traitType, string memory traitValue, string memory append
    ) public pure returns (string memory) {
        return string(abi.encodePacked(
            '{',
                '"trait_type": "', traitType, '",'
                '"value": "', traitValue, '"'
            '}',
            append
        ));
    }

    

}
